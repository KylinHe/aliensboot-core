// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base.proto

/*
	Package base is a generated protocol buffer package.

	It is generated from these files:
		base.proto
		demo.proto

	It has these top-level messages:
		Any
*/
package base

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Any struct {
	Id     uint16 `protobuf:"varint,1,opt,name=id,proto3,customtype=uint16" json:"id"`
	SeqId  uint32 `protobuf:"varint,2,opt,name=seqId,proto3" json:"seqId,omitempty"`
	AuthId int64  `protobuf:"varint,3,opt,name=authId,proto3" json:"authId,omitempty"`
	GateId string `protobuf:"bytes,4,opt,name=gateId,proto3" json:"gateId,omitempty"`
	// Must be a valid serialized protocol buffer of the above specified type.
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// 头信息 扩展数据
	Header map[string][]byte `protobuf:"bytes,6,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptorBase, []int{0} }

func (m *Any) GetSeqId() uint32 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *Any) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *Any) GetGateId() string {
	if m != nil {
		return m.GateId
	}
	return ""
}

func (m *Any) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Any) GetHeader() map[string][]byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Any)(nil), "base.Any")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCService service

type RPCServiceClient interface {
	// rpc request (google.protobuf.Any) returns (google.protobuf.Any) {}
	Request(ctx context.Context, in *Any, opts ...grpc.CallOption) (RPCService_RequestClient, error)
	Receive(ctx context.Context, opts ...grpc.CallOption) (RPCService_ReceiveClient, error)
}

type rPCServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPCServiceClient(cc *grpc.ClientConn) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) Request(ctx context.Context, in *Any, opts ...grpc.CallOption) (RPCService_RequestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCService_serviceDesc.Streams[0], c.cc, "/base.RPCService/request", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCService_RequestClient interface {
	Recv() (*Any, error)
	grpc.ClientStream
}

type rPCServiceRequestClient struct {
	grpc.ClientStream
}

func (x *rPCServiceRequestClient) Recv() (*Any, error) {
	m := new(Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCServiceClient) Receive(ctx context.Context, opts ...grpc.CallOption) (RPCService_ReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCService_serviceDesc.Streams[1], c.cc, "/base.RPCService/receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceReceiveClient{stream}
	return x, nil
}

type RPCService_ReceiveClient interface {
	Send(*Any) error
	CloseAndRecv() (*Any, error)
	grpc.ClientStream
}

type rPCServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *rPCServiceReceiveClient) Send(m *Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServiceReceiveClient) CloseAndRecv() (*Any, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RPCService service

type RPCServiceServer interface {
	// rpc request (google.protobuf.Any) returns (google.protobuf.Any) {}
	Request(*Any, RPCService_RequestServer) error
	Receive(RPCService_ReceiveServer) error
}

func RegisterRPCServiceServer(s *grpc.Server, srv RPCServiceServer) {
	s.RegisterService(&_RPCService_serviceDesc, srv)
}

func _RPCService_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Any)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServiceServer).Request(m, &rPCServiceRequestServer{stream})
}

type RPCService_RequestServer interface {
	Send(*Any) error
	grpc.ServerStream
}

type rPCServiceRequestServer struct {
	grpc.ServerStream
}

func (x *rPCServiceRequestServer) Send(m *Any) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).Receive(&rPCServiceReceiveServer{stream})
}

type RPCService_ReceiveServer interface {
	SendAndClose(*Any) error
	Recv() (*Any, error)
	grpc.ServerStream
}

type rPCServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *rPCServiceReceiveServer) SendAndClose(m *Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServiceReceiveServer) Recv() (*Any, error) {
	m := new(Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "base.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "request",
			Handler:       _RPCService_Request_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "receive",
			Handler:       _RPCService_Receive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "base.proto",
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.Id))
	}
	if m.SeqId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.SeqId))
	}
	if m.AuthId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBase(dAtA, i, uint64(m.AuthId))
	}
	if len(m.GateId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.GateId)))
		i += copy(dAtA[i:], m.GateId)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Header) > 0 {
		for k, _ := range m.Header {
			dAtA[i] = 0x32
			i++
			v := m.Header[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovBase(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovBase(uint64(len(k))) + byteSize
			i = encodeVarintBase(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBase(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBase(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Any) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBase(uint64(m.Id))
	}
	if m.SeqId != 0 {
		n += 1 + sovBase(uint64(m.SeqId))
	}
	if m.AuthId != 0 {
		n += 1 + sovBase(uint64(m.AuthId))
	}
	l = len(m.GateId)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if len(m.Header) > 0 {
		for k, v := range m.Header {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovBase(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovBase(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBase(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBase
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthBase
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBase(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBase
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Header[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("base.proto", fileDescriptorBase) }

var fileDescriptorBase = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0xb9, 0x2d, 0xf4, 0x0f, 0x97, 0x5f, 0x43, 0x26, 0x6a, 0x1a, 0x16, 0xa5, 0xc1, 0x4d,
	0x37, 0x14, 0xc5, 0xc4, 0xa8, 0x3b, 0x30, 0x26, 0xb2, 0x33, 0x63, 0xe2, 0xbe, 0xa5, 0xd7, 0x32,
	0x51, 0x5b, 0x29, 0x33, 0x24, 0x7d, 0x13, 0x1f, 0x89, 0xa5, 0x6b, 0x17, 0xc4, 0xe0, 0xd2, 0x97,
	0x30, 0x9d, 0x36, 0xc2, 0xc6, 0xdd, 0xf9, 0xce, 0x9c, 0x99, 0x33, 0xf7, 0x22, 0x86, 0xc1, 0x82,
	0xfc, 0xd7, 0x2c, 0x95, 0x29, 0xab, 0x17, 0xba, 0xd3, 0x8f, 0x85, 0x9c, 0xa9, 0xd0, 0x9f, 0xa6,
	0x2f, 0x83, 0x38, 0x8d, 0xd3, 0x81, 0x3e, 0x0c, 0xd5, 0xa3, 0x26, 0x0d, 0x5a, 0x95, 0x97, 0x7a,
	0xdf, 0x80, 0xe6, 0x28, 0xc9, 0x99, 0x83, 0x86, 0x88, 0x6c, 0x70, 0xc1, 0xdb, 0x1b, 0xef, 0xaf,
	0xd6, 0xdd, 0xda, 0xc7, 0xba, 0x6b, 0x29, 0x91, 0xc8, 0xd3, 0x73, 0x6e, 0x88, 0x88, 0x1d, 0x60,
	0x63, 0x41, 0xf3, 0x49, 0x64, 0x1b, 0x45, 0x84, 0x97, 0xc0, 0x8e, 0xd0, 0x0a, 0x94, 0x9c, 0x4d,
	0x22, 0xdb, 0x74, 0xc1, 0x33, 0x79, 0x45, 0x85, 0x1f, 0x07, 0x92, 0x26, 0x91, 0x5d, 0x77, 0xc1,
	0x6b, 0xf2, 0x8a, 0x8a, 0x57, 0x96, 0xc1, 0xb3, 0x22, 0xbb, 0xe1, 0x82, 0xf7, 0x9f, 0x97, 0xc0,
	0xfa, 0x68, 0xcd, 0x28, 0x88, 0x28, 0xb3, 0x2d, 0xd7, 0xf4, 0x5a, 0xc3, 0x43, 0x5f, 0x4f, 0x35,
	0x4a, 0x72, 0xff, 0x56, 0xfb, 0x37, 0x89, 0xcc, 0x72, 0x5e, 0x85, 0x3a, 0x97, 0xd8, 0xda, 0xb1,
	0x59, 0x1b, 0xcd, 0x27, 0xca, 0xf5, 0xd7, 0x9b, 0xbc, 0x90, 0xdb, 0x16, 0x63, 0xa7, 0xe5, 0xca,
	0xb8, 0x80, 0xe1, 0x03, 0x22, 0xbf, 0xbb, 0xbe, 0xa7, 0x6c, 0x29, 0xa6, 0xc4, 0x8e, 0xf1, 0x5f,
	0x46, 0x73, 0x45, 0x0b, 0xc9, 0x9a, 0xbf, 0x95, 0x9d, 0xad, 0xec, 0xd5, 0x4e, 0xa0, 0x0c, 0x4d,
	0x49, 0x2c, 0xe9, 0xaf, 0x90, 0x07, 0xe3, 0xf6, 0x6a, 0xe3, 0xc0, 0xfb, 0xc6, 0x81, 0xcf, 0x8d,
	0x03, 0x6f, 0x5f, 0x4e, 0x2d, 0xb4, 0xf4, 0x7a, 0xcf, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x88,
	0x61, 0xa2, 0x3e, 0xa1, 0x01, 0x00, 0x00,
}
